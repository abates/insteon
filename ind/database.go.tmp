package ind

import (
	"encoding/json"
	"errors"

	"github.com/abates/insteon"
)

var (
	RecordNotFound = errors.New("Device not found in database")
)

type DeviceRecord struct {
	ID       int              `json:"id"`
	Address  insteon.Address  `json:"address"`
	Category insteon.Category `json:"category"`
}

type DeviceDatabase struct {
	devices      []*databaseRecord
	idIndex      map[int]*databaseRecord
	addressIndex map[insteon.Address]*databaseRecord
	lastId       int
}

func NewDeviceDatabase() *DeviceDatabase {
	return &DeviceDatabase{}
}

func (ddb *DeviceDatabase) Find(id int) (record DeviceRecord, err error) {
	if record, found := ddb.index[id]; found {
		return record, nil
	}
	return record, RecordNotFound
}

func (ddb *DeviceDatabase) FindByAddress(address insteon.Address) (record DeviceRecord, err error) {
	if record, found := ddb.db[address]; found {
		return record, nil
	}
	return record, RecordNotFound
}

func (ddb *DeviceDatabase) Save(device insteon.Device) error {
	if record, found := ddb.addressIndex[device.Address()]; found {
		record.Category = device.Category
	} else {
		record = &DeviceRecord{
			ID:       ddb.lastId + 1,
			Address:  device.Address(),
			Category: device.Category(),
		}
		ddb.devices = append(ddb.devices, record)
		ddb.addressIndex[device.Address()] = record
		ddb.idIndex[record.ID] = record
		ddb.lastId++
	}
	return nil
}

func (ddb *DeviceDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(ddb.devices)
}

func (ddb *DeviceDatabase) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, ddb.devices)
}
